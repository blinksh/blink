var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function blink_uio_activate() {
    var UIKeyModifierAlphaShift = 1 << 16;
    var UIKeyModifierShift = 1 << 17;
    var UIKeyModifierControl = 1 << 18;
    var UIKeyModifierAlternate = 1 << 19;
    var UIKeyModifierCommand = 1 << 20;
    var UIKeyModifierNumericPad = 1 << 21;
    var toolbarMods = 0;
    var shiftLeft = false;
    var shiftRight = false;
    var asciiRegexp = /^[a-z0-9]$/i;
    var repeatFilter = 0;
    function _insertText(text, el) {
        if (el === void 0) { el = document.activeElement; }
        if (!el) {
            return;
        }
        // @ts-ignore
        var _a = [el.selectionStart, el.selectionEnd], start = _a[0], end = _a[1];
        // @ts-ignore
        el.setRangeText(text, start, end, 'end');
        el.dispatchEvent(new InputEvent('input'));
    }
    function _op(op, args) {
        var message = __assign(__assign({}, args), { op: op });
        // @ts-ignore
        window.webkit.messageHandlers._kb.postMessage(message);
    }
    function _blinkOp(op, data) {
        // @ts-ignore
        window.webkit.messageHandlers.interOp.postMessage({ op: op, data: data });
    }
    ;
    function term_getCurrentSelection() {
        var selection = document.getSelection();
        if (!selection || selection.rangeCount === 0 || selection.type === 'Caret') {
            return { base: '', offset: 0, text: '' };
        }
        var r = selection.getRangeAt(0).getBoundingClientRect();
        var rect = "{{" + r.x + ", " + r.y + "}, {" + r.width + ", " + r.height + "}}";
        return {
            // @ts-ignore
            base: selection.baseNode.textContent,
            // @ts-ignore
            offset: selection.baseOffset,
            text: "",
            rect: rect
        };
    }
    document.addEventListener('selectionchange', function () {
        _blinkOp('selectionchange', term_getCurrentSelection());
    });
    function _handleToolbarMods(value) {
        toolbarMods = value;
        var elem = document.activeElement;
        if (!elem) {
            return;
        }
        if (value == 0) {
            // @ts-ignore
            elem.readOnly = elem.__readOnly;
        }
        else {
            // @ts-ignore
            elem.__readOnly = elem.readOnly;
        }
    }
    function _handleToolbarPress(value) {
        var _a;
        if (value.indexOf('0:0:0:') === 0) {
            var text = value.replace('0:0:0:', '');
            _insertText(text);
            return;
        }
        var parts = value.split(/:/g);
        var modFlags = parseInt(parts[0], 10);
        var keyCode = parseInt(parts[1], 10);
        var key = parts[3] == "" ? ":" : parts[3]; // keymap?
        var keyDown = new KeyboardEvent('keydown', {
            bubbles: true,
            cancelable: true,
            composed: false,
            isComposing: false,
            // @ts-ignore
            keyCode: keyCode,
            key: key,
            metaKey: (modFlags & UIKeyModifierCommand) === UIKeyModifierCommand,
            ctrlKey: (modFlags & UIKeyModifierControl) === UIKeyModifierControl,
            altKey: (modFlags & UIKeyModifierAlternate) === UIKeyModifierAlternate,
            shiftKey: shiftLeft || shiftRight
        });
        (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.dispatchEvent(keyDown);
        _op('out', { data: '' });
    }
    // @ts-ignore
    window._onKB = function (cmd, arg) {
        switch (cmd) {
            case 'toolbar-mods':
                _handleToolbarMods(arg);
                break;
            case 'toolbar-press':
                _handleToolbarPress(arg);
                break;
        }
    };
    function _keyDown(e) {
        var _a;
        if (e.target !== document.activeElement) {
            return;
        }
        if (e.code === 'ShiftLeft') {
            shiftLeft = true;
        }
        else if (e.code === 'ShiftRight') {
            shiftRight = true;
        }
        // @ts-ignore
        if (e.__blink) {
            return;
        }
        if (toolbarMods === 0) {
            if (e.repeat && asciiRegexp.test(e.key)) {
                repeatFilter += 1;
                if (repeatFilter == 1) {
                    _insertText(e.key, document.activeElement);
                }
                else {
                    repeatFilter = repeatFilter % 2;
                }
            }
            else {
                repeatFilter = 0;
            }
            return;
        }
        var keyDown = new KeyboardEvent('keydown', {
            bubbles: e.bubbles,
            cancelable: e.cancelable,
            composed: e.composed,
            key: e.key,
            code: e.code,
            location: e.location,
            repeat: e.repeat,
            ctrlKey: (toolbarMods & UIKeyModifierControl) === UIKeyModifierControl,
            shiftKey: e.shiftKey,
            altKey: (toolbarMods & UIKeyModifierAlternate) === UIKeyModifierAlternate,
            metaKey: (toolbarMods & UIKeyModifierCommand) === UIKeyModifierCommand,
            // @ts-ignore
            isComposing: e.isComposing,
            // @ts-ignore
            charCode: e.charCode,
            keyCode: e.keyCode,
            which: e.which
        });
        // @ts-ignore
        keyDown.__blink = true;
        e.preventDefault();
        (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.dispatchEvent(keyDown);
        _op('out', { data: '' });
    }
    function _keyUp(e) {
        if (e.target !== document.activeElement) {
            return;
        }
        if (e.code === 'ShiftLeft') {
            shiftLeft = false;
        }
        else if (e.code === 'ShiftRight') {
            shiftRight = false;
        }
    }
    function _trackElementIfNeeded(elem) {
        if (!elem) {
            return;
        }
        // @ts-ignore
        if (elem.__blink) {
            return;
        }
        // @ts-ignore
        elem.__blink = true;
        elem.autocapitalize = "none";
        // @ts-ignore
        elem.autocorrect = false;
        elem.addEventListener('keydown', _keyDown, true);
        elem.addEventListener('keyup', _keyUp, true);
    }
    window.addEventListener('focusout', function (e) {
        // @ts-ignore
        _trackElementIfNeeded(e.relatedTarget);
    }, true);
    window.addEventListener('focusin', function (e) {
        // @ts-ignore
        _trackElementIfNeeded(e.target);
    }, true);
    // @ts-ignore
    window.term_touch = function (eventType, identifier, x, y, deltaX, deltaY, modFlags) {
        console.log(identifier, eventType);
        var target = document.elementFromPoint(x, y) || document.body;
        var clientX = x + deltaX;
        var clientY = y + deltaY;
        var touch = new Touch({
            target: target,
            identifier: identifier,
            clientX: clientX,
            clientY: clientY,
            pageX: clientX,
            pageY: clientY
        });
        var opts = {
            // bubbles: true,
            cancelable: true,
            touches: [touch],
            targetTouches: [touch],
            changedTouches: [touch],
            ctrlKey: modFlags & UIKeyModifierControl,
            altKey: modFlags & UIKeyModifierAlternate,
            shiftKey: modFlags & UIKeyModifierShift,
            metaKey: modFlags & UIKeyModifierCommand
        };
        // @ts-ignore
        var event = new TouchEvent(eventType, opts);
        document.dispatchEvent(event);
    };
    // @ts-ignore
    _trackElementIfNeeded(document.activeElement);
}
window.addEventListener('DOMContentLoaded', function (event) {
    blink_uio_activate();
});
